{"version":3,"file":"Loading.stories.45d01291.js","sources":["../../../../packages/react/src/lib/internal/hooks/useDelayedUnmount.ts","../../../../packages/react/src/lib/internal/Portal.tsx","../../../../packages/react/src/lib/Feedback/Loading/Loading.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function useDelayedUnmount(isMounted: boolean, delayTime: number) {\n  const [shouldRender, setShouldRender] = useState(false);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    if (isMounted && !shouldRender) {\n      setShouldRender(true);\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime);\n    }\n    return () => clearTimeout(timeoutId);\n  }, [isMounted, delayTime, shouldRender]);\n  return shouldRender;\n}\n","import { PropsWithChildren } from 'react';\nimport { createPortal } from 'react-dom';\nimport { getGlobalPortal } from './containerIds';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const Portal = (props: PropsWithChildren<any>) => {\n  const parent = typeof window !== 'undefined' ? getGlobalPortal() : null;\n  if (!parent) return null;\n  return createPortal(props.children, parent);\n};\n","import {\n  clsx,\n  loadingAnimations,\n  loadingModal,\n  loadingParent,\n} from '@icarus/core';\nimport { useEffect, useState } from 'react';\nimport { LoadingIcon } from '../../Icons';\nimport { useDelayedUnmount } from '../../internal/hooks/useDelayedUnmount';\nimport { Portal } from '../../internal/Portal';\n\ntype P = {\n  fullscreen?: boolean;\n  visible?: boolean;\n};\n\nexport const LoadingBase = ({ fullscreen, visible }: P) => {\n  const animation = visible ? loadingAnimations.in : loadingAnimations.out;\n\n  return (\n    <div\n      className={clsx(\n        loadingParent.default,\n        fullscreen && loadingParent.fullscreen\n      )}\n      style={{\n        animation,\n      }}\n    >\n      <div\n        className={clsx(\n          loadingModal({\n            fullscreen,\n          })\n        )}\n      >\n        <LoadingIcon size=\"xxxl\" />\n      </div>\n    </div>\n  );\n};\n\nexport const Loading = ({ visible, fullscreen }: P) => {\n  const [mounted, setMounted] = useState(visible || false);\n  const shouldRender = useDelayedUnmount(mounted, 250);\n  useEffect(() => {\n    if (typeof visible === 'boolean')\n      setMounted((prevMounted) => {\n        if (prevMounted !== visible) {\n          return visible;\n        }\n        return prevMounted;\n      });\n  }, [visible]);\n  return (\n    <Portal>\n      {shouldRender && (\n        <LoadingBase fullscreen={fullscreen} visible={mounted} />\n      )}\n    </Portal>\n  );\n};\n"],"names":["useState","useEffect","createPortal","fullscreen","visible","_jsx","animation","setMounted","prevMounted","mounted"],"mappings":"8qBAEO,WAA2B,EAAoB,EAAmB,CACvE,KAAM,CAAC,EAAc,GAAmBA,EAAA,QAAA,SAAS,EAAK,EAEtDC,SAAAA,QAAAA,UAAU,IAAM,CACV,GAAA,GACA,MAAA,IAAa,CAAC,EAChB,EAAgB,EAAI,EACX,CAAC,GAAa,GACvB,GAAY,WAAW,IAAM,EAAgB,EAAK,EAAG,CAAS,GAEzD,IAAM,aAAa,CAAS,CAClC,EAAA,CAAC,EAAW,EAAW,CAAY,CAAC,EAChC,CACT,CCVO,KAAA,GAAA,AAAA,GAAA,CACL,KAAA,GAAA,MAAA,SAAA,YAAA,EAAA,EAAA,KACA,MAAA,GACAC,uBAAA,EAAA,SAAA,CAAA,EADa,IAEd,iUCOM,KAAA,GAAA,CAAA,CAAqB,aAAEC,aAAYC,CACxC,KAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAEA,MAAAC,GAAA,MAAA,CACE,UAAA,EAAA,EAAA,QAAA,GAAA,EAAA,UAAA,EACiB,MAAA,CAIR,WACLC,EADK,SAAAD,EAAA,MAAA,CAIP,UAAA,EAAA,EAAA,CAEiB,YACXF,CAAAA,CAAAA,EAFW,SAAAE,EAAA,EAAA,CAMf,KAAA,MAAkB,CAAA,CAAlB,CAAA,CAPF,CAAA,CAWL,EAEM,EAAA,CAAA,CAAiB,UAAED,gBAASD,CACjC,KAAA,CAAA,EAAA,GAAAH,EAAAA,QAAAA,SAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAAA,EACAC,SAAAA,QAAAA,UAAAA,IAAAA,CACE,AAAA,MAAA,IAAA,WACEM,EAAAA,AAAAA,GACE,IAAA,EACE,EAEF,CAAOC,CAJC,EAAA,CAAA,CAAA,CAAA,EAOdH,EAAA,EAAA,CACE,SAAA,GAAAA,EAAA,EAAA,CAEI,aAAa,QAAA,CAAiCI,CAAAA,CAA9C,CAAA,CAIP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}